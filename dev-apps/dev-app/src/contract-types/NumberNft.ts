/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace NumberNft {
  export type TokenStruct = {
    id: PromiseOrValue<BigNumberish>;
    number: PromiseOrValue<BigNumberish>;
  };

  export type TokenStructOutput = [BigNumber, BigNumber] & {
    id: BigNumber;
    number: BigNumber;
  };
}

export interface NumberNftInterface extends utils.Interface {
  functions: {
    "alwaysFailRequire()": FunctionFragment;
    "alwaysFailRevert()": FunctionFragment;
    "getPower()": FunctionFragment;
    "getPowerAnonymous()": FunctionFragment;
    "getToken(uint256)": FunctionFragment;
    "incPowerNumber()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "setPower(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "alwaysFailRequire"
      | "alwaysFailRevert"
      | "getPower"
      | "getPowerAnonymous"
      | "getToken"
      | "incPowerNumber"
      | "mint"
      | "setPower"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "alwaysFailRequire",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alwaysFailRevert",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPowerAnonymous",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incPowerNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPower",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "alwaysFailRequire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alwaysFailRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPowerAnonymous",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incPowerNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPower", data: BytesLike): Result;

  events: {
    "PowerSet(uint256,string)": EventFragment;
    "TokenMinted(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PowerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
}

export interface PowerSetEventObject {
  powerNumber: BigNumber;
  powerPhrase: string;
}
export type PowerSetEvent = TypedEvent<
  [BigNumber, string],
  PowerSetEventObject
>;

export type PowerSetEventFilter = TypedEventFilter<PowerSetEvent>;

export interface TokenMintedEventObject {
  id: BigNumber;
  token: NumberNft.TokenStructOutput;
}
export type TokenMintedEvent = TypedEvent<
  [BigNumber, NumberNft.TokenStructOutput],
  TokenMintedEventObject
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface NumberNft extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NumberNftInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    alwaysFailRequire(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    alwaysFailRevert(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPower(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { powerNumber: BigNumber; powerPhrase: string }
    >;

    getPowerAnonymous(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    getToken(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NumberNft.TokenStructOutput]>;

    incPowerNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPower(
      number: PromiseOrValue<BigNumberish>,
      phrase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  alwaysFailRequire(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  alwaysFailRevert(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPower(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { powerNumber: BigNumber; powerPhrase: string }
  >;

  getPowerAnonymous(overrides?: CallOverrides): Promise<[BigNumber, string]>;

  getToken(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NumberNft.TokenStructOutput>;

  incPowerNumber(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    number: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPower(
    number: PromiseOrValue<BigNumberish>,
    phrase: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    alwaysFailRequire(overrides?: CallOverrides): Promise<void>;

    alwaysFailRevert(overrides?: CallOverrides): Promise<void>;

    getPower(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { powerNumber: BigNumber; powerPhrase: string }
    >;

    getPowerAnonymous(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    getToken(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NumberNft.TokenStructOutput>;

    incPowerNumber(overrides?: CallOverrides): Promise<void>;

    mint(
      number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPower(
      number: PromiseOrValue<BigNumberish>,
      phrase: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PowerSet(uint256,string)"(
      powerNumber?: PromiseOrValue<BigNumberish> | null,
      powerPhrase?: null
    ): PowerSetEventFilter;
    PowerSet(
      powerNumber?: PromiseOrValue<BigNumberish> | null,
      powerPhrase?: null
    ): PowerSetEventFilter;

    "TokenMinted(uint256,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null
    ): TokenMintedEventFilter;
  };

  estimateGas: {
    alwaysFailRequire(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    alwaysFailRevert(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPower(overrides?: CallOverrides): Promise<BigNumber>;

    getPowerAnonymous(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incPowerNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPower(
      number: PromiseOrValue<BigNumberish>,
      phrase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    alwaysFailRequire(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    alwaysFailRevert(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPowerAnonymous(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incPowerNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPower(
      number: PromiseOrValue<BigNumberish>,
      phrase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
